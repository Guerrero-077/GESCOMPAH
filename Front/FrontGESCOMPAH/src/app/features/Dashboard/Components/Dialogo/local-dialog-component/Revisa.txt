


<div class="modal-container">
    <!-- Header con título y navegación de pasos -->
    <div class="modal-header">
        <h2 mat-dialog-title class="modal-title">{{ local().id ? 'Editar local' : 'Crear Nuevo Local' }}</h2>

        <!-- Navegación por pasos -->
        <div class="steps-navigation">
            <div class="step" [class.active]="currentStep === 1" [class.completed]="currentStep > 1"
                (click)="goToStep(1)">
                <span class="step-number">1</span>
                <span class="step-label">Información Básica</span>
            </div>

            <div class="step-divider"></div>

            <div class="step" [class.active]="currentStep === 2" [class.completed]="currentStep > 2"
                (click)="goToStep(2)">
                <span class="step-number">2</span>
                <span class="step-label">Ubicación</span>
            </div>

            <div class="step-divider"></div>

            <div class="step" [class.active]="currentStep === 3" [class.completed]="currentStep > 3"
                (click)="goToStep(3)">
                <span class="step-number">3</span>
                <span class="step-label">Imágenes</span>
            </div>
        </div>

        <!-- Indicador de paso actual -->
        <div class="step-indicator">
            Paso {{ currentStep }} de 3
        </div>
    </div>

    <mat-dialog-content class="dialog-form">

        <!-- Paso 1: Información Básica -->
        <div *ngIf="currentStep === 1" class="step-content">
            <div class="step-header">
                <h3>Información Básica</h3>
                <p>Ingresa la información básica del local</p>
            </div>

            <app-dynamic-form-component [config]="formConfig" [showSubmitButton]="false"
                (formDataChange)="onFormDataChange($event)">
            </app-dynamic-form-component>
        </div>

        <!-- Paso 2: Ubicación -->
        <div *ngIf="currentStep === 2" class="step-content">
            <div class="step-header">
                <h3>Ubicación</h3>
                <p>Establece la ubicación del local</p>
            </div>

            <!-- Aquí irían los campos de ubicación -->
            <div class="location-fields">
                <mat-form-field appearance="outline" class="full-width">
                    <mat-label>Dirección</mat-label>
                    <input matInput [(ngModel)]="locationData.address" placeholder="Ingresa la dirección">
                </mat-form-field>

                <div class="row">
                    <mat-form-field appearance="outline" class="half-width">
                        <mat-label>Ciudad</mat-label>
                        <input matInput [(ngModel)]="locationData.city" placeholder="Ciudad">
                    </mat-form-field>

                    <mat-form-field appearance="outline" class="half-width">
                        <mat-label>Departamento</mat-label>
                        <input matInput [(ngModel)]="locationData.state" placeholder="Departamento">
                    </mat-form-field>
                </div>
            </div>
        </div>

        <!-- Paso 3: Imágenes -->
        <div *ngIf="currentStep === 3" class="step-content">
            <div class="step-header">
                <h3>Imágenes</h3>
                <p>Agrega imágenes del local</p>
            </div>

            <div class="image-upload-section">
                <div class="upload-area" (click)="fileInput.click()" [class.has-images]="imagePreviews.length > 0">
                    <input #fileInput type="file" (change)="handleImageUpload($event)" multiple accept="image/*"
                        style="display: none;" />

                    <div class="upload-content">
                        <mat-icon>cloud_upload</mat-icon>
                        <p>Haz clic para agregar imágenes</p>
                        <span>o arrastra y suelta archivos aquí</span>
                    </div>
                </div>

                <div *ngIf="imagePreviews.length > 0" class="image-grid">
                    <div *ngFor="let img of imagePreviews; let i = index" class="image-preview">
                        <img [src]="img" alt="preview" />
                        <button mat-icon-button class="remove-image" (click)="removeImage(i)">
                            <mat-icon>close</mat-icon>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </mat-dialog-content>

    <!-- Footer con botones de navegación -->
    <mat-dialog-actions class="dialog-actions">
        <div class="actions-container">
            <button mat-button *ngIf="currentStep > 1" (click)="previousStep()" class="nav-button previous">
                Anterior
            </button>

            <div class="spacer"></div>

            <button mat-button mat-dialog-close (click)="onCancel()" class="cancel-button">
                Cancelar
            </button>

            <button mat-raised-button color="primary" *ngIf="currentStep < 3" (click)="nextStep()"
                class="nav-button next">
                Siguiente
            </button>

            <button mat-raised-button color="primary" *ngIf="currentStep === 3" (click)="onFormSubmit()"
                class="submit-button">
                {{ local().id ? 'Actualizar' : 'Crear Local' }}
            </button>
        </div>
    </mat-dialog-actions>
</div>






==================================================================
import { CommonModule } from '@angular/common';
import { Component, inject, model } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatIconModule } from '@angular/material/icon';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import {
  MatDialogTitle,
  MatDialogContent,
  MatDialogActions,
  MatDialogClose,
  MAT_DIALOG_DATA,
  MatDialogRef
} from '@angular/material/dialog';

import { LocalesModel } from '../../../../../shared/components/Models/card/card.models';
import { DynamicFormComponent } from '../../../../../shared/components/Form/dynamic-form-component/dynamic-form-component';
import { DynamicFormConfig } from '../../../../../shared/components/Models/Form/form.models';
import { buildLocalFormConfig } from '../../form-config/local-form.config';

@Component({
  selector: 'app-local-dialog-component',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatDialogTitle,
    MatDialogContent,
    MatDialogActions,
    MatDialogClose,
    MatCheckboxModule,
    MatIconModule,
    DynamicFormComponent
  ],
  templateUrl: './local-dialog-component.html',
  styleUrl: './local-dialog-component.css'
})
export class LocalDialogComponent {
  readonly dialogRef = inject(MatDialogRef<LocalDialogComponent>);
  readonly data = inject<LocalesModel>(MAT_DIALOG_DATA);
  readonly local = model({ ...this.data });

  // Estado del wizard
  currentStep = 1;

  // Datos del formulario
  formData: any = {};
  selectedFiles: File[] = [];
  imagePreviews: string[] = [];

  // Datos de ubicación
  locationData = {
    address: '',
    city: '',
    state: ''
  };

  // Configuración del formulario dinámico
  formConfig: DynamicFormConfig = buildLocalFormConfig(this.local());

  constructor() {
    // Inicializar datos si estamos editando
    if (this.local().id) {
      this.formData = { ...this.local() };
      // this.locationData = {
      //   address: this.local().address || '',
      //   city: this.local().city || '',
      //   state: this.local().state || ''
      // };
    }
  }

  // Navegación entre pasos
  nextStep(): void {
    if (this.canProceedToNextStep()) {
      this.currentStep++;
    }
  }

  previousStep(): void {
    if (this.currentStep > 1) {
      this.currentStep--;
    }
  }

  goToStep(step: number): void {
    if (this.canGoToStep(step)) {
      this.currentStep = step;
    }
  }

  // Validaciones para navegación
  canProceedToNextStep(): boolean {
    switch (this.currentStep) {
      case 1:
        return this.isFormDataValid();
      case 2:
        return this.isLocationDataValid();
      default:
        return true;
    }
  }

  canGoToStep(step: number): boolean {
    if (step <= this.currentStep) return true;

    // Solo permite ir hacia adelante si los pasos anteriores están completos
    for (let i = 1; i < step; i++) {
      if (!this.isStepComplete(i)) {
        return false;
      }
    }
    return true;
  }

  isStepComplete(step: number): boolean {
    switch (step) {
      case 1:
        return this.isFormDataValid();
      case 2:
        return this.isLocationDataValid();
      case 3:
        return true; // Las imágenes son opcionales
      default:
        return false;
    }
  }

  isFormDataValid(): boolean {
    // Validar campos requeridos del formulario básico
    return !!(this.formData.name && this.formData.name.trim());
  }

  isLocationDataValid(): boolean {
    // Validar que al menos la dirección esté presente
    return !!(this.locationData.address && this.locationData.address.trim());
  }

  // Manejo del formulario dinámico
  onFormDataChange(data: any): void {
    this.formData = { ...this.formData, ...data };
  }

  // Manejo de imágenes
  handleImageUpload(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) return;

    const files = Array.from(input.files);

    // Validar tipo y tamaño de archivo
    const validFiles = files.filter(file => {
      const isValidType = file.type.startsWith('image/');
      const isValidSize = file.size <= 5 * 1024 * 1024; // 5MB max
      return isValidType && isValidSize;
    });

    this.selectedFiles.push(...validFiles);

    validFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result as string;
        this.imagePreviews.push(base64);
      };
      reader.readAsDataURL(file);
    });

    // Limpiar el input
    input.value = '';
  }

  removeImage(index: number): void {
    this.imagePreviews.splice(index, 1);
    this.selectedFiles.splice(index, 1);
  }

  // Envío del formulario
  onFormSubmit(): void {
    if (!this.isFormDataValid()) {
      this.currentStep = 1;
      return;
    }

    if (!this.isLocationDataValid()) {
      this.currentStep = 2;
      return;
    }

    const result = {
      ...this.local(),
      ...this.formData,
      ...this.locationData,
      files: this.selectedFiles
    };

    this.dialogRef.close(result);
  }

  onCancel(): void {
    this.dialogRef.close();
  }
}