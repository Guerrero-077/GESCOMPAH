import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { CityModel, CityCreate, CityUpdate } from '../../models/city.models';
import { CityService } from './city.service';

@Injectable({
  providedIn: 'root'
})
export class CityStore {
  private readonly _cities = new BehaviorSubject<CityModel[]>([]);
  readonly cities$ = this._cities.asObservable();

  constructor(private cityService: CityService) {
    this.loadAll();
  }

  private get cities(): CityModel[] {
    return this._cities.getValue();
  }

  private set cities(val: CityModel[]) {
    this._cities.next(val);
  }

  loadAll() {
    this.cityService.getAll("City").pipe(
      tap(data => this.cities = data),
      catchError(err => {
        console.error('Error loading cities', err);
        return throwError(() => err);
      })
    ).subscribe();
  }

  create(city: CityCreate): Observable<CityModel> {
    const cityToCreate: CityModel = {
      ...city,
      id: 0, // Assuming ID is generated by the backend
      departmentName: '', // Will be populated by backend or fetched later
      active: true // Default for new entities
    };
    return this.cityService.Add("City", cityToCreate).pipe(
      tap(() => {
        this.loadAll(); // Force refresh
      })
    );
  }

  update(updateDto: CityUpdate): Observable<CityModel> {
    const cityToUpdate: CityModel = {
      ...updateDto,
      departmentName: '' // Dummy value, as backend likely expects departmentId
    };
    return this.cityService.Update("City", cityToUpdate.id, cityToUpdate).pipe(
      tap(() => {
        this.loadAll(); // Force refresh
      })
    );
  }

  delete(id: number): Observable<CityModel> {
    return this.cityService.Delete("City", id).pipe(
      tap(() => {
        this.cities = this.cities.filter(c => c.id !== id);
      })
    );
  }
}
